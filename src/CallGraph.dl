.symbol_type Node

.decl Classes(a:Node) input

.decl Methods(a:Node, b:Node, c:Node) input

.decl MethodCalls(a:Node, b: Node, c: Node, d:Node) input

.decl ParamTypes(a:Node, b:Node,c:Node  ) input

.decl ReturnType(a:Node, b:Node, c:Node) input

.decl InstantiatedClasses(a:Node,b:Node,c:Node) input

.decl ImmediateSubclass(a:Node,b:Node) input

.decl ReadField(a:Node,b:Node,c:Node,d:Node, e:Node) input

.decl WriteField(a:Node, b:Node,c:Node, d:Node, e:Node) input

.decl Fields(a:Node,b:Node,c:Node, d:Node) input

.decl InterfaceFields(a:Node, b:Node, c:Node, d:Node) input

//p,q,r denote intermediate methods
//a,b,d denote intermediate classes
//x,y,z denoe variables

.decl Reachable(c:Node,m:Node) output
Reachable("LCalculator", "main([Ljava/lang/String;)V").
Reachable(k,n):- Reachable(c,m),CallerCallee(c,m,k,n).

.decl CallerCallee(a:Node, b:Node, c:Node, d:Node)
CallerCallee(c,m,k,n):-Reachable(c,m),MethodCalls(c,m,a,n),inclusiveSubType(a,b),Methods(b,k,n), RelatedMethodClasses(c,m,b).

.decl RelatedMethodClasses(a:Node, b:Node, c:Node)
RelatedMethodClasses(k,n,l):-Reachable(c,m),CallerCallee(c,m,k,n),subTypesParamTypes(k,n,l),RelatedMethodClasses(c,m,l).

RelatedMethodClasses(c,m,l):- Reachable(c,m),CallerCallee(c,m,k,n),subTypesReturnType(k,n,l),RelatedMethodClasses(k,n,l).

RelatedMethodClasses(k,n,l):- Reachable(c,m),CallerCallee(c,m,k,n),MethodCalls(c,m,a,n),inclusiveSubType(a,l),RelatedMethodClasses(c,m,l),Methods(l,k,n).

RelatedMethodClasses(c,m,l):- Reachable(c,m),InstantiatedClasses(c,m,l).

RelatedMethodClasses(c,m,l):- Reachable(c,m),ReadField(c,m,a,x,_),Fields(a,b,x,_),RelatedFieldClasses(b,x,l).
RelatedMethodClasses(c,m,l):- Reachable(c,m),ReadField(c,m,a,x,_),InterfaceFields(a,b,x,l).
//I am assuming that 'l' is also the assigned type to field 'x'

.declRelatedFieldClasses(a:Node,b:Node,c:Node)
RelatedFieldClasses(k,x,l):- Reachable(c,m),WriteField(c,m,d,x,_),Fields(d,k,x,e),inclusiveSubType(e,l),RelatedMethodClasses(c,m,l).

.decl inclusiveSubType(a:Node,b:Node)
inclusiveSubType(c,x):- Subclass(c,x).
inclusiveSubType(c,c):- Classes(c).
inclusiveSubType(c,c):-Subclass(_,c).
//.output inclusiveSubtype


//Subclass Calculation
.decl Subclass(a:Node,b:Node)
Subclass(x,y) :- ImmediateSubclass(x,y).
Subclass(x,y) :- Subclass(x,z), ImmediateSubclass(z,y).
//.output Subclass

.decl subTypesReturnType(a:Node, b:Node, c:Node)
subTypesReturnType(k,n,l):- ReturnType(k,n,c),inclusiveSubType(c,l).

.decl subTypesParamTypes(a:Node, b:Node, c:Node)
subTypesParamTypes(k,n,l):- ParamTypes(k,n,c),inclusiveSubType(c,l).


